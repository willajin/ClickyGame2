{"version":3,"sources":["logo.svg","components/Container/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/ImageCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","props","react_default","a","createElement","className","children","Wrapper","Jumbotron","class","score","topscore","message","ImageCard","onClick","clickCount","id","alt","name","src","image","Footer","App","state","cards","resetGame","_this","setState","console","log","this","forEach","card","clicked","find","e","i","sort","Math","random","_this2","components_Container","components_Jumbotron","components_Wrapper","map","components_ImageCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6uCAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCYzBC,MARf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMK,iBCKJC,MARf,SAAiBN,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMK,iBCaJE,MAhBf,SAAmBP,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIK,MAAM,aAAV,qBACAP,EAAAC,EAAAC,cAAA,KAAGK,MAAM,QAAT,2EACAP,EAAAC,EAAAC,cAAA,MAAIK,MAAM,SACVP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,UAAX,UACYR,EAAMS,MADlB,iBACuCT,EAAMU,UAE7CT,EAAAC,EAAAC,cAAA,OAAKK,MAAM,WACNR,EAAMW,iBCGRC,MAbf,SAAmBZ,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBS,QAAS,kBAAMb,EAAMc,WAAWd,EAAMe,MACjEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OACIa,IAAKhB,EAAMiB,KACXC,IAAKlB,EAAMmB,iBCGhBC,MATf,SAAgBpB,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,MAAIK,MAAM,SACLR,EAAMK,kBCoEJgB,oNAhEbC,MAAQ,CACNC,QACAd,MAAO,EACPC,SAAU,EACVC,QAAS,MAGXa,UAAY,WAaV,OAXIC,EAAKH,MAAMb,MAAQgB,EAAKH,MAAMZ,UAChCe,EAAKC,SAAS,CAAEhB,SAAUe,EAAKH,MAAMb,OAAS,WAC5CkB,QAAQC,IAAIC,KAAKP,MAAMZ,YAI3Be,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,QAAU,IAGjBP,EAAKC,SAAS,CAAEjB,MAAO,KAChB,KAGTK,WAAa,SAAAC,GACXU,EAAKH,MAAMC,MAAMU,KAAK,SAACC,EAAGC,GACxB,GAAID,EAAEnB,KAAOA,EAAI,CACf,GAAyB,IAArBQ,EAAMY,GAAGH,QAMX,OALAT,EAAMY,GAAGH,QAAU,EACnBP,EAAKC,SAAS,CAAEjB,MAAOgB,EAAKH,MAAMb,MAAQ,EAAGE,QAAS,WAAa,WACjEgB,QAAQC,IAAIC,KAAKP,MAAMb,SAEzBgB,EAAKH,MAAMC,MAAMa,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAGPb,EAAKC,SAAS,CAAEf,QAAS,cACzBc,EAAKD,wFAMJ,IAAAe,EAAAV,KACP,OACE5B,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CAAWhC,MAAOoB,KAAKP,MAAMb,MAAOC,SAAUmB,KAAKP,MAAMZ,SAAUC,QAASkB,KAAKP,MAAMX,UACvFV,EAAAC,EAAAC,cAACuC,EAAD,KACGb,KAAKP,MAAMC,MAAMoB,IAAI,SAAAZ,GAAI,OACxB9B,EAAAC,EAAAC,cAACyC,EAAD,CACE9B,WAAYyB,EAAKzB,WACjBC,GAAIgB,EAAKhB,GACT8B,IAAKd,EAAKhB,GACVI,MAAOY,EAAKZ,WAIlBlB,EAAAC,EAAAC,cAAC2C,EAAD,sCA1DUC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c382ca02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// container component\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Container(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","// wrapper component\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","// jumbotron component\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h1 class=\"display-4\">The  Clicky  Game</h1>\r\n            <p class=\"lead\">Click on an image to earn points, but don't click on any more than once</p>\r\n            <hr class=\"my-4\"></hr>\r\n            <div class=\"scores\">\r\n                Score: {props.score} | Top Score: {props.topscore}\r\n            </div>\r\n            <div class=\"message\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","// imagecard component\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n        <div className=\"card border-0\" onClick={() => props.clickCount(props.id)}>\r\n            <div className=\"img-container\">\r\n                <img\r\n                    alt={props.name}\r\n                    src={props.image}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;","// footer component\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <header className=\"footer\">\r\n        <hr class=\"my-4\"></hr>\r\n            {props.children}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Container from \"./components/Container\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport ImageCard from \"./components/ImageCard\";\nimport Footer from \"./components/Footer\";\nimport cards from \"./cards.json\"\nimport './App.css';\n\nclass App extends Component {\n  // set state to cards json array\n  state = {\n    cards,\n    score: 0,\n    topscore: 0,\n    message: \"\"\n  };\n\n  resetGame = () => {\n    // update topscore if applicable\n    if (this.state.score > this.state.topscore) {\n      this.setState({ topscore: this.state.score }, function () {\n        console.log(this.state.topscore);\n      });\n    }\n    // reset all card clicked to 0\n    this.state.cards.forEach(card => {\n      card.clicked = 0;\n    });\n    // reset score to 0\n    this.setState({ score: 0 });\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.cards.find((e, i) => {\n      if (e.id === id) {\n        if (cards[i].clicked === 0) {\n          cards[i].clicked = 1;\n          this.setState({ score: this.state.score + 1, message: \"Correct\" }, function () {\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true;\n        }\n        else {\n          this.setState({ message: \"Incorrect\" });\n          this.resetGame();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Jumbotron score={this.state.score} topscore={this.state.topscore} message={this.state.message} />\n        <Wrapper>\n          {this.state.cards.map(card => (\n            <ImageCard\n              clickCount={this.clickCount}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer>\n          Copyright | Willa Jin\n        </Footer>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}